
int     # (от integer) целое число
float   # числа с плавающей запятой (десятичные)
complex # числа (x+yj)
a = 1+2j
print(a, "is complex number?", isinstance(1+2j, complex))
#(1+2j) is complex number? True

'Действия с числами'
# // -целочисленное деление
# / -простое деление (возможно дробное)
# % -остаток от деления
# ** -возведение в степень


bool  # логический тип данных: True, False

list  # списки [ ] изменяемая упорядоченная последовательность элементов разных типов
      # возможен доcтуп по индексу и извлечение среза []
a = [1, 2.2, 'python']
b = a.pop(1) # -> вырезали второй элемент
print(b) # -> 2.2
print(a) # -> [1, 'python']
'распаковка'
print(test([1, 2, 3])) #-> [1, 2, 3]
print(test(*[1, 2, 3])) #-> 1, 2, 3

tuple # кортежи ( ) неизменяемая упорядоченная последовательность элементов разных типов
      # возможен допуск по индексу и извлечение среза []
tuple_ = (1, 2.5, 1+3j, [1, 2, 3], 'String', (1, 2), True, False)

str # (от string) строки '' неизменяемая последовательность символов
    # возможен допуск по индексу и извлечение среза []
s = "Простая строка"
s = '''многострочная
строка'''

'''Два типа кавычек используется для возможности вставлять одни кавычки внутри других,
если нужно чтобы они отображались в консоли'''

set # множества {} неупорядоченная последовательность с уникальными элементами
    # объединение и пересечение, дубликаты автоудаляются
    # т.к. неупорядочено - операторы извлечения/среза не работают
    # элементы разных типов
a = {5,2,3,1,4}

dict # словари {} неупорядоченные наборы пар ключ-значение

d = {1:'value', 'key':2}
print('d[1]=', d[1]) # -> d[1]= value
print('d[key]=', d['key']) # -> d[key]= 2
# print("d[2] =", d[2]) # -> KeyError: 1


# Преобразование типов данных с помощью таких функций, как int(), float(), str() и т.д.
int(-10.6)
-10 # -> часть после запятой будет утеряна
float('2.5')
2.5
str(25)
'25'
set([1, 2, 3, 4])
{1, 2, 3, 4}
tuple({5,6,7})
(5, 6, 7)

# из строки в список символов:
print(list('hello')) # -> ['h', 'e', 'l', 'l', 'o']

# Для преобразования списка из символов обратно в строку:
print(''.join(['h', 'e', 'l', 'l', 'o'])) # -> hello

# Для преобразования в словарь каждый элемент последовательности должен быть парой:
print(dict([[1,2],[3,4]])) # -> {1: 2, 3: 4}

print(dict([(3,26),(4,44)])) # -> {3: 26, 4: 44}